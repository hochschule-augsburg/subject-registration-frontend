/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Data to create a new registration
 * @export
 * @interface NewRegistrationTO
 */
export interface NewRegistrationTO {
    /**
     * 
     * @type {string}
     * @memberof NewRegistrationTO
     */
    'student': string;
    /**
     * 
     * @type {Array<NewSubjectSelectionTO>}
     * @memberof NewRegistrationTO
     */
    'subjectSelection': Array<NewSubjectSelectionTO>;
}
/**
 * Information to a new registration window
 * @export
 * @interface NewRegistrationWindowTO
 */
export interface NewRegistrationWindowTO {
    /**
     * 
     * @type {string}
     * @memberof NewRegistrationWindowTO
     */
    'semester': string;
    /**
     * 
     * @type {string}
     * @memberof NewRegistrationWindowTO
     */
    'startDate': string;
    /**
     * 
     * @type {string}
     * @memberof NewRegistrationWindowTO
     */
    'endDate': string;
}
/**
 * Data to create a new subject selection
 * @export
 * @interface NewSubjectSelectionTO
 */
export interface NewSubjectSelectionTO {
    /**
     * 
     * @type {RegistrationTO}
     * @memberof NewSubjectSelectionTO
     */
    'registration': RegistrationTO;
    /**
     * 
     * @type {SubjectTO}
     * @memberof NewSubjectSelectionTO
     */
    'subject': SubjectTO;
    /**
     * 
     * @type {number}
     * @memberof NewSubjectSelectionTO
     */
    'points': number;
}
/**
 * Data to create a new subject
 * @export
 * @interface NewSubjectTO
 */
export interface NewSubjectTO {
    /**
     * 
     * @type {string}
     * @memberof NewSubjectTO
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof NewSubjectTO
     */
    'professor': string;
    /**
     * 
     * @type {number}
     * @memberof NewSubjectTO
     */
    'creditPoints': number;
    /**
     * 
     * @type {number}
     * @memberof NewSubjectTO
     */
    'capacity': number;
    /**
     * 
     * @type {boolean}
     * @memberof NewSubjectTO
     */
    'status': boolean;
    /**
     * 
     * @type {string}
     * @memberof NewSubjectTO
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof NewSubjectTO
     */
    'specialization'?: string;
}
/**
 * Information to a specific registration
 * @export
 * @interface RegistrationTO
 */
export interface RegistrationTO {
    /**
     * 
     * @type {string}
     * @memberof RegistrationTO
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof RegistrationTO
     */
    'student': string;
}
/**
 * Data to update a registration
 * @export
 * @interface RegistrationUpdateTO
 */
export interface RegistrationUpdateTO {
    /**
     * 
     * @type {string}
     * @memberof RegistrationUpdateTO
     */
    'id': string;
    /**
     * 
     * @type {Array<SubjectSelectionTO>}
     * @memberof RegistrationUpdateTO
     */
    'subjectSelection': Array<SubjectSelectionTO>;
}
/**
 * Information to a specific registration window
 * @export
 * @interface RegistrationWindowTO
 */
export interface RegistrationWindowTO {
    /**
     * 
     * @type {string}
     * @memberof RegistrationWindowTO
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof RegistrationWindowTO
     */
    'semester': string;
    /**
     * 
     * @type {string}
     * @memberof RegistrationWindowTO
     */
    'startDate': string;
    /**
     * 
     * @type {string}
     * @memberof RegistrationWindowTO
     */
    'endDate': string;
}
/**
 * Data to update a registration window
 * @export
 * @interface RegistrationWindowUpdateTO
 */
export interface RegistrationWindowUpdateTO {
    /**
     * 
     * @type {string}
     * @memberof RegistrationWindowUpdateTO
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof RegistrationWindowUpdateTO
     */
    'startDate': string;
    /**
     * 
     * @type {string}
     * @memberof RegistrationWindowUpdateTO
     */
    'endDate': string;
}
/**
 * Information to a specific subject selection
 * @export
 * @interface SubjectSelectionTO
 */
export interface SubjectSelectionTO {
    /**
     * 
     * @type {string}
     * @memberof SubjectSelectionTO
     */
    'id': string;
    /**
     * 
     * @type {RegistrationTO}
     * @memberof SubjectSelectionTO
     */
    'registration': RegistrationTO;
    /**
     * 
     * @type {SubjectTO}
     * @memberof SubjectSelectionTO
     */
    'subject': SubjectTO;
    /**
     * 
     * @type {number}
     * @memberof SubjectSelectionTO
     */
    'points': number;
}
/**
 * Information to a specific subject
 * @export
 * @interface SubjectTO
 */
export interface SubjectTO {
    /**
     * 
     * @type {string}
     * @memberof SubjectTO
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof SubjectTO
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof SubjectTO
     */
    'professor': string;
    /**
     * 
     * @type {number}
     * @memberof SubjectTO
     */
    'creditPoints': number;
    /**
     * 
     * @type {number}
     * @memberof SubjectTO
     */
    'capacity': number;
    /**
     * 
     * @type {boolean}
     * @memberof SubjectTO
     */
    'status': boolean;
    /**
     * 
     * @type {string}
     * @memberof SubjectTO
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubjectTO
     */
    'specialization'?: string;
}
/**
 * Data to update a subject
 * @export
 * @interface SubjectUpdateTO
 */
export interface SubjectUpdateTO {
    /**
     * 
     * @type {string}
     * @memberof SubjectUpdateTO
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof SubjectUpdateTO
     */
    'professor': string;
    /**
     * 
     * @type {number}
     * @memberof SubjectUpdateTO
     */
    'creditPoints': number;
    /**
     * 
     * @type {number}
     * @memberof SubjectUpdateTO
     */
    'capacity': number;
    /**
     * 
     * @type {boolean}
     * @memberof SubjectUpdateTO
     */
    'status': boolean;
    /**
     * 
     * @type {string}
     * @memberof SubjectUpdateTO
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubjectUpdateTO
     */
    'specialization'?: string;
}

/**
 * RegistrationControllerApi - axios parameter creator
 * @export
 */
export const RegistrationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new registration
         * @param {NewRegistrationTO} newRegistrationTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewRegistration: async (newRegistrationTO: NewRegistrationTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'newRegistrationTO' is not null or undefined
            assertParamExists('createNewRegistration', 'newRegistrationTO', newRegistrationTO)
            const localVarPath = `/api/registration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newRegistrationTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an existing registration
         * @param {string} registrationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRegistration: async (registrationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registrationId' is not null or undefined
            assertParamExists('deleteRegistration', 'registrationId', registrationId)
            const localVarPath = `/api/registration/{registrationId}`
                .replace(`{${"registrationId"}}`, encodeURIComponent(String(registrationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of all Registrations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRegistrations: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/registration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get registration by student
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegistration: async (uid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('getRegistration', 'uid', uid)
            const localVarPath = `/api/registration/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing registration
         * @param {RegistrationUpdateTO} registrationUpdateTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRegistration: async (registrationUpdateTO: RegistrationUpdateTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registrationUpdateTO' is not null or undefined
            assertParamExists('updateRegistration', 'registrationUpdateTO', registrationUpdateTO)
            const localVarPath = `/api/registration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registrationUpdateTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RegistrationControllerApi - functional programming interface
 * @export
 */
export const RegistrationControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RegistrationControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new registration
         * @param {NewRegistrationTO} newRegistrationTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewRegistration(newRegistrationTO: NewRegistrationTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistrationTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewRegistration(newRegistrationTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete an existing registration
         * @param {string} registrationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRegistration(registrationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRegistration(registrationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get list of all Registrations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllRegistrations(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RegistrationTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllRegistrations(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get registration by student
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRegistration(uid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistrationTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRegistration(uid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing registration
         * @param {RegistrationUpdateTO} registrationUpdateTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRegistration(registrationUpdateTO: RegistrationUpdateTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistrationTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRegistration(registrationUpdateTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RegistrationControllerApi - factory interface
 * @export
 */
export const RegistrationControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RegistrationControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new registration
         * @param {NewRegistrationTO} newRegistrationTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewRegistration(newRegistrationTO: NewRegistrationTO, options?: any): AxiosPromise<RegistrationTO> {
            return localVarFp.createNewRegistration(newRegistrationTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an existing registration
         * @param {string} registrationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRegistration(registrationId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRegistration(registrationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of all Registrations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRegistrations(options?: any): AxiosPromise<Array<RegistrationTO>> {
            return localVarFp.getAllRegistrations(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get registration by student
         * @param {string} uid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegistration(uid: string, options?: any): AxiosPromise<RegistrationTO> {
            return localVarFp.getRegistration(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing registration
         * @param {RegistrationUpdateTO} registrationUpdateTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRegistration(registrationUpdateTO: RegistrationUpdateTO, options?: any): AxiosPromise<RegistrationTO> {
            return localVarFp.updateRegistration(registrationUpdateTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RegistrationControllerApi - object-oriented interface
 * @export
 * @class RegistrationControllerApi
 * @extends {BaseAPI}
 */
export class RegistrationControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create a new registration
     * @param {NewRegistrationTO} newRegistrationTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrationControllerApi
     */
    public createNewRegistration(newRegistrationTO: NewRegistrationTO, options?: AxiosRequestConfig) {
        return RegistrationControllerApiFp(this.configuration).createNewRegistration(newRegistrationTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an existing registration
     * @param {string} registrationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrationControllerApi
     */
    public deleteRegistration(registrationId: string, options?: AxiosRequestConfig) {
        return RegistrationControllerApiFp(this.configuration).deleteRegistration(registrationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of all Registrations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrationControllerApi
     */
    public getAllRegistrations(options?: AxiosRequestConfig) {
        return RegistrationControllerApiFp(this.configuration).getAllRegistrations(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get registration by student
     * @param {string} uid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrationControllerApi
     */
    public getRegistration(uid: string, options?: AxiosRequestConfig) {
        return RegistrationControllerApiFp(this.configuration).getRegistration(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing registration
     * @param {RegistrationUpdateTO} registrationUpdateTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrationControllerApi
     */
    public updateRegistration(registrationUpdateTO: RegistrationUpdateTO, options?: AxiosRequestConfig) {
        return RegistrationControllerApiFp(this.configuration).updateRegistration(registrationUpdateTO, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RegistrationWindowControllerApi - axios parameter creator
 * @export
 */
export const RegistrationWindowControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new registration window
         * @param {NewRegistrationWindowTO} newRegistrationWindowTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewRegistrationWindow: async (newRegistrationWindowTO: NewRegistrationWindowTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'newRegistrationWindowTO' is not null or undefined
            assertParamExists('createNewRegistrationWindow', 'newRegistrationWindowTO', newRegistrationWindowTO)
            const localVarPath = `/api/registration_window`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newRegistrationWindowTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an existing registration window
         * @param {string} registrationWindowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRegistrationWindow: async (registrationWindowId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registrationWindowId' is not null or undefined
            assertParamExists('deleteRegistrationWindow', 'registrationWindowId', registrationWindowId)
            const localVarPath = `/api/registration_window/{registrationWindowId}`
                .replace(`{${"registrationWindowId"}}`, encodeURIComponent(String(registrationWindowId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of all registration windows
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRegistrationWindows: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/registration_window`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing registration window
         * @param {RegistrationWindowUpdateTO} registrationWindowUpdateTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRegistrationWindow: async (registrationWindowUpdateTO: RegistrationWindowUpdateTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registrationWindowUpdateTO' is not null or undefined
            assertParamExists('updateRegistrationWindow', 'registrationWindowUpdateTO', registrationWindowUpdateTO)
            const localVarPath = `/api/registration_window`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registrationWindowUpdateTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RegistrationWindowControllerApi - functional programming interface
 * @export
 */
export const RegistrationWindowControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RegistrationWindowControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new registration window
         * @param {NewRegistrationWindowTO} newRegistrationWindowTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewRegistrationWindow(newRegistrationWindowTO: NewRegistrationWindowTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistrationWindowTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewRegistrationWindow(newRegistrationWindowTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete an existing registration window
         * @param {string} registrationWindowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRegistrationWindow(registrationWindowId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRegistrationWindow(registrationWindowId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get list of all registration windows
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllRegistrationWindows(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RegistrationWindowTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllRegistrationWindows(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing registration window
         * @param {RegistrationWindowUpdateTO} registrationWindowUpdateTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRegistrationWindow(registrationWindowUpdateTO: RegistrationWindowUpdateTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistrationWindowTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRegistrationWindow(registrationWindowUpdateTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RegistrationWindowControllerApi - factory interface
 * @export
 */
export const RegistrationWindowControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RegistrationWindowControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new registration window
         * @param {NewRegistrationWindowTO} newRegistrationWindowTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewRegistrationWindow(newRegistrationWindowTO: NewRegistrationWindowTO, options?: any): AxiosPromise<RegistrationWindowTO> {
            return localVarFp.createNewRegistrationWindow(newRegistrationWindowTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an existing registration window
         * @param {string} registrationWindowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRegistrationWindow(registrationWindowId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRegistrationWindow(registrationWindowId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of all registration windows
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRegistrationWindows(options?: any): AxiosPromise<Array<RegistrationWindowTO>> {
            return localVarFp.getAllRegistrationWindows(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing registration window
         * @param {RegistrationWindowUpdateTO} registrationWindowUpdateTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRegistrationWindow(registrationWindowUpdateTO: RegistrationWindowUpdateTO, options?: any): AxiosPromise<RegistrationWindowTO> {
            return localVarFp.updateRegistrationWindow(registrationWindowUpdateTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RegistrationWindowControllerApi - object-oriented interface
 * @export
 * @class RegistrationWindowControllerApi
 * @extends {BaseAPI}
 */
export class RegistrationWindowControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create a new registration window
     * @param {NewRegistrationWindowTO} newRegistrationWindowTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrationWindowControllerApi
     */
    public createNewRegistrationWindow(newRegistrationWindowTO: NewRegistrationWindowTO, options?: AxiosRequestConfig) {
        return RegistrationWindowControllerApiFp(this.configuration).createNewRegistrationWindow(newRegistrationWindowTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an existing registration window
     * @param {string} registrationWindowId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrationWindowControllerApi
     */
    public deleteRegistrationWindow(registrationWindowId: string, options?: AxiosRequestConfig) {
        return RegistrationWindowControllerApiFp(this.configuration).deleteRegistrationWindow(registrationWindowId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of all registration windows
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrationWindowControllerApi
     */
    public getAllRegistrationWindows(options?: AxiosRequestConfig) {
        return RegistrationWindowControllerApiFp(this.configuration).getAllRegistrationWindows(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing registration window
     * @param {RegistrationWindowUpdateTO} registrationWindowUpdateTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrationWindowControllerApi
     */
    public updateRegistrationWindow(registrationWindowUpdateTO: RegistrationWindowUpdateTO, options?: AxiosRequestConfig) {
        return RegistrationWindowControllerApiFp(this.configuration).updateRegistrationWindow(registrationWindowUpdateTO, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SubjectControllerApi - axios parameter creator
 * @export
 */
export const SubjectControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new subject
         * @param {NewSubjectTO} newSubjectTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubject: async (newSubjectTO: NewSubjectTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'newSubjectTO' is not null or undefined
            assertParamExists('createSubject', 'newSubjectTO', newSubjectTO)
            const localVarPath = `/api/subject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newSubjectTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an existing subject
         * @param {string} subjectName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubject: async (subjectName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subjectName' is not null or undefined
            assertParamExists('deleteSubject', 'subjectName', subjectName)
            const localVarPath = `/api/subject/{subjectName}`
                .replace(`{${"subjectName"}}`, encodeURIComponent(String(subjectName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of all Subjects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSubjects: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/subject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing subject
         * @param {SubjectUpdateTO} subjectUpdateTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubject: async (subjectUpdateTO: SubjectUpdateTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subjectUpdateTO' is not null or undefined
            assertParamExists('updateSubject', 'subjectUpdateTO', subjectUpdateTO)
            const localVarPath = `/api/subject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subjectUpdateTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubjectControllerApi - functional programming interface
 * @export
 */
export const SubjectControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubjectControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new subject
         * @param {NewSubjectTO} newSubjectTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubject(newSubjectTO: NewSubjectTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubjectTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSubject(newSubjectTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete an existing subject
         * @param {string} subjectName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSubject(subjectName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSubject(subjectName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get list of all Subjects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSubjects(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SubjectTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSubjects(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing subject
         * @param {SubjectUpdateTO} subjectUpdateTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSubject(subjectUpdateTO: SubjectUpdateTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubjectTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSubject(subjectUpdateTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SubjectControllerApi - factory interface
 * @export
 */
export const SubjectControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubjectControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new subject
         * @param {NewSubjectTO} newSubjectTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubject(newSubjectTO: NewSubjectTO, options?: any): AxiosPromise<SubjectTO> {
            return localVarFp.createSubject(newSubjectTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an existing subject
         * @param {string} subjectName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubject(subjectName: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSubject(subjectName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of all Subjects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSubjects(options?: any): AxiosPromise<Array<SubjectTO>> {
            return localVarFp.getAllSubjects(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing subject
         * @param {SubjectUpdateTO} subjectUpdateTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubject(subjectUpdateTO: SubjectUpdateTO, options?: any): AxiosPromise<SubjectTO> {
            return localVarFp.updateSubject(subjectUpdateTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SubjectControllerApi - object-oriented interface
 * @export
 * @class SubjectControllerApi
 * @extends {BaseAPI}
 */
export class SubjectControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create a new subject
     * @param {NewSubjectTO} newSubjectTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectControllerApi
     */
    public createSubject(newSubjectTO: NewSubjectTO, options?: AxiosRequestConfig) {
        return SubjectControllerApiFp(this.configuration).createSubject(newSubjectTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an existing subject
     * @param {string} subjectName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectControllerApi
     */
    public deleteSubject(subjectName: string, options?: AxiosRequestConfig) {
        return SubjectControllerApiFp(this.configuration).deleteSubject(subjectName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of all Subjects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectControllerApi
     */
    public getAllSubjects(options?: AxiosRequestConfig) {
        return SubjectControllerApiFp(this.configuration).getAllSubjects(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing subject
     * @param {SubjectUpdateTO} subjectUpdateTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectControllerApi
     */
    public updateSubject(subjectUpdateTO: SubjectUpdateTO, options?: AxiosRequestConfig) {
        return SubjectControllerApiFp(this.configuration).updateSubject(subjectUpdateTO, options).then((request) => request(this.axios, this.basePath));
    }
}


